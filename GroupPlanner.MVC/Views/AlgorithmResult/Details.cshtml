@model GroupPlanner.Application.AlgorithmResult.AlgorithmResultDetailsDto
@using GroupPlanner.Application.Algorithms

@{
    var schedule = ViewBag.Schedule as List<ScheduleEntryDto>;

    // Lista unikalnych nazw zadań
    var taskNames = schedule.Select(s => s.TaskEncodedName).Distinct().ToList();

    // Przygotowanie kontrastowych kolorów (np. 0, 60, 120, 180, ...)
    var taskColors = new Dictionary<string, string>();
    int taskCount = taskNames.Count;
    for (int i = 0; i < taskCount; i++)
    {
        int hue = (i * 360 / taskCount); // równy odstęp na kole barw
        taskColors[taskNames[i]] = $"hsl({hue}, 60%, 85%)"; // kontrastowe, ale nadal jasne
    }
}


<h2>Szczegóły wyniku algorytmu</h2>

<p>
    <strong>Algorytm:</strong> @ViewBag.Algorithm <br />
    <strong>Wynik:</strong> @ViewBag.ResultValue <br />
    <strong>Czas działania:</strong> @ViewBag.Duration
</p>

<table class="table">
    <thead>
        <tr>
            <th>Data</th>
            <th>Opis podzadania</th>
            <th>Zadanie</th>
            <th>Liczba godzin</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var entry in schedule.OrderBy(e => e.Date))
        {
            var bgColor = taskColors[entry.TaskEncodedName];
            <tr>
                <td style="background-color: @bgColor">@entry.Date.ToString("yyyy-MM-dd")</td>
                <td style="background-color: @bgColor">@entry.SubtaskDescription</td>
                <td style="background-color: @bgColor">@entry.TaskEncodedName</td>
                <td style="background-color: @bgColor">@entry.Hours</td>
            </tr>
        }

    </tbody>
</table>

<!-- Legenda kolorów -->
<h5>Legenda kolorów zadań:</h5>
<ul class="list-unstyled">
    @foreach (var kvp in taskColors)
    {
        <li style="margin-bottom: 5px;">
            <span style="display: inline-block; width: 20px; height: 20px; background-color: @kvp.Value; border: 1px solid #ccc; margin-right: 10px;"></span>
            <strong>@kvp.Key</strong>
        </li>
    }
</ul>

<!-- Wykres -->
<h4>Funkcja celu (Score w kolejnych iteracjach)</h4>
<canvas id="scoreChart" width="600" height="300"></canvas>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="~/js/AlgorithmResult/scoreChart.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const scoreHistoryJson = '@Html.Raw(ViewBag.ScoreHistory ?? "[]")';
            renderScoreChart(scoreHistoryJson);
        });
    </script>
}

<a asp-action="Index" class="btn btn-secondary">Powrót</a>
